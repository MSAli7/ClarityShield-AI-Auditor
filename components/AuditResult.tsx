import React from 'react';
import type { AuditReport, AuditFinding } from '../types';
import { Severity } from '../types';
import ShieldCheckIcon from './icons/ShieldCheckIcon';
import DownloadIcon from './icons/DownloadIcon';

const severityConfig: { [key in Severity]: { color: string; background: string; } } = {
  [Severity.Critical]: { color: 'text-red-300', background: 'bg-red-900/50' },
  [Severity.High]: { color: 'text-orange-300', background: 'bg-orange-900/50' },
  [Severity.Medium]: { color: 'text-yellow-300', background: 'bg-yellow-900/50' },
  [Severity.Low]: { color: 'text-blue-300', background: 'bg-blue-900/50' },
  [Severity.Informational]: { color: 'text-gray-300', background: 'bg-gray-700/50' },
  [Severity.Gas]: { color: 'text-green-300', background: 'bg-green-900/50' },
};

const FindingCard: React.FC<{ finding: AuditFinding }> = ({ finding }) => {
  const config = severityConfig[finding.severity] || severityConfig[Severity.Informational];

  return (
    <div className={`border border-gray-700/50 rounded-lg overflow-hidden shadow-lg ${config.background}`}>
      <div className={`px-6 py-4 border-b border-gray-700/50 flex justify-between items-center`}>
        <h3 className="text-xl font-bold text-gray-100">{finding.title}</h3>
        <span className={`px-3 py-1 text-sm font-semibold rounded-full ${config.color} ${config.background.replace('50', '80')}`}>{finding.severity}</span>
      </div>
      <div className="px-6 py-4 space-y-4">
        <div>
          <h4 className="font-semibold text-gray-400 mb-2">Description</h4>
          <p className="text-gray-300 whitespace-pre-wrap">{finding.description}</p>
        </div>
        <div>
          <h4 className="font-semibold text-gray-400 mb-2">Recommendation</h4>
          <p className="text-gray-300 whitespace-pre-wrap">{finding.recommendation}</p>
        </div>
      </div>
    </div>
  );
};


const AuditResult: React.FC<{ report: AuditReport }> = ({ report }) => {
  if (!report.findings || report.findings.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-full text-center p-8 bg-gray-800/50 rounded-lg">
        <ShieldCheckIcon className="w-16 h-16 text-green-400 mb-4" />
        <h2 className="text-2xl font-bold text-white">No Vulnerabilities Found</h2>
        <p className="text-gray-400 mt-2">
          The AI-powered audit did not find any security issues in the provided contract.
          <br/>
          Always perform manual reviews and thorough testing as well.
        </p>
      </div>
    );
  }

  const sortedFindings = [...report.findings].sort((a, b) => {
    const severityOrder = Object.values(Severity);
    return severityOrder.indexOf(a.severity) - severityOrder.indexOf(b.severity);
  });

  const downloadFile = (content: string, fileName: string, contentType: string) => {
    const blob = new Blob([content], { type: contentType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = fileName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const handleExportJson = () => {
    const jsonContent = JSON.stringify({ findings: sortedFindings }, null, 2);
    downloadFile(jsonContent, 'clarity-audit-report.json', 'application/json');
  };

  const handleExportMarkdown = () => {
    let markdownContent = `# Clarity Smart Contract Audit Report\n\nThis report was generated by ClarityShield AI Auditor.\n\n---\n\n`;
    sortedFindings.forEach(finding => {
      markdownContent += `## ${finding.title}\n\n`;
      markdownContent += `- **Severity:** ${finding.severity}\n\n`;
      markdownContent += `### Description\n\n${finding.description.trim()}\n\n`;
      markdownContent += `### Recommendation\n\n${finding.recommendation.trim()}\n\n---\n\n`;
    });
    downloadFile(markdownContent, 'clarity-audit-report.md', 'text/markdown');
  };

  return (
    <div className="space-y-6">
       <div className="flex flex-wrap justify-between items-center gap-4">
        <h2 className="text-3xl font-bold text-white">Audit Report</h2>
        <div className="flex space-x-2">
           <button
             onClick={handleExportJson}
             className="flex items-center space-x-2 bg-gray-700 hover:bg-gray-600 text-gray-200 font-semibold py-2 px-3 rounded-md text-sm transition-colors"
             aria-label="Export report as JSON"
           >
             <DownloadIcon className="w-4 h-4" />
             <span>JSON</span>
           </button>
           <button
             onClick={handleExportMarkdown}
             className="flex items-center space-x-2 bg-gray-700 hover:bg-gray-600 text-gray-200 font-semibold py-2 px-3 rounded-md text-sm transition-colors"
             aria-label="Export report as Markdown"
           >
             <DownloadIcon className="w-4 h-4" />
             <span>Markdown</span>
           </button>
        </div>
      </div>
      {sortedFindings.map((finding, index) => (
        <FindingCard key={index} finding={finding} />
      ))}
    </div>
  );
};

export default AuditResult;
